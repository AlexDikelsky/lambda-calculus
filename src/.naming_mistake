
impl PartialEq for Term {
    fn eq(&self, other: &Self) -> bool {
        //This could be much faster and memory intensive if you don't clone
        let vars: HashSet<char> = self.get_all_var_names().union(&other.get_all_var_names())
            .map(|x| *x).collect();

        // Make a list so it reads the hashset in the same order for both
        let same_map: HashMap<char, char> = vars.into_iter().zip(LETTERS.iter().map(|x| *x)).collect();

        let s = self.clone().to_reg_names(same_map.clone());
        let o = other.clone().to_reg_names(same_map);

        dbg!(&s, &o);
        s.equal_names_matter(o)

    }
}


    fn get_all_var_names(&self) -> HashSet<char> {
        match &self {
            Var(c) => vec![*c].into_iter().collect(),
            Abs(c, a) => vec![*c].into_iter().collect::<HashSet<char>>()
                .union(&a.get_all_var_names()).map(|x| *x).collect(),
            App(a, b) => a.get_all_var_names().union(&b.get_all_var_names()).map(|x| *x).collect(),
        }
    }
